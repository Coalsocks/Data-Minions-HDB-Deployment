{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f503ff8-c10d-42a3-bd42-2c551f272f13",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import pickle\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39929f7b-d17d-45dc-b591-e397506e0e7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the trained model from the .pkl file\n",
    "def load_model():\n",
    "    with open('rf_model.pkl', 'rb') as rf:\n",
    "        model = pickle.load(rf)\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4006668d-80cb-4f1c-aa21-abe621892caa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load data.csv\n",
    "def load_data():\n",
    "    data = pd.read_csv('data.csv')\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff0a89a3-e047-47bf-90cb-0fd39b0ade49",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to make predictions\n",
    "def predict(model, flat_type, tranc_yearmonth, floor_area_sqft, hdb_age, total_dwelling_units, remaining_lease, amenities_score, region, flat_model, storey_category, pri_dist_vac):\n",
    "    # Prepare the input data\n",
    "    data = pd.DataFrame({\n",
    "        'flat_type': [flat_type],\n",
    "        'tranc_yearmonth': [tranc_yearmonth],\n",
    "        'floor_area_sqft': [floor_area_sqft],\n",
    "        'hdb_age': [hdb_age],\n",
    "        'total_dwelling_units': [total_dwelling_units],\n",
    "        'remaining_lease': [remaining_lease],\n",
    "        'amenities_score': [amenities_score],\n",
    "        'region': [region],\n",
    "        'flat_model': [flat_model],\n",
    "        'storey_category': [storey_category],\n",
    "        'pri_dist_vac': [pri_dist_vac]\n",
    "    })\n",
    "    \n",
    "    # Make prediction\n",
    "    prediction = model.predict(data)\n",
    "    return prediction[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98c86051-9916-4da3-90ed-395527e11af1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Main Streamlit app function\n",
    "def main():\n",
    "    st.title(\"HDB Resale Price Prediction App\")\n",
    "    \n",
    "    # Sidebar for user input\n",
    "    st.sidebar.header(\"Input Parameters\")\n",
    "    \n",
    "    def user_input_features():\n",
    "        flat_type = st.sidebar.selectbox('Flat Type', ['1 Room', '2 Room', '3 Room', '4 Room', '5 Room', 'Executive', 'Multi-Generation'])\n",
    "        \n",
    "        # Automatically set tranc_yearmonth to the current year and month (YYYYMM)\n",
    "        current_datetime = datetime.now()\n",
    "        tranc_yearmonth = current_datetime.strftime(\"%Y%m\")\n",
    "        \n",
    "        floor_area_sqft = st.sidebar.number_input('Floor Area (in sqft)', step=1.0, format=\"%.1f\", value=1000.0)\n",
    "        hdb_age = st.sidebar.number_input('HDB Age (in years)', step=1.0, format=\"%.1f\", value=20.0)\n",
    "        total_dwelling_units = st.sidebar.number_input('Total Dwelling Units', step=1.0, format=\"%.1f\", value=150.0)\n",
    "        remaining_lease = st.sidebar.number_input('Remaining Lease (in years)', step=1.0, format=\"%.1f\", value=60.0)\n",
    "        \n",
    "        # Adding the amenities score based on user input\n",
    "        st.sidebar.subheader(\"Amenities within 1km\")\n",
    "        mall_nearby = st.sidebar.checkbox('Mall')\n",
    "        hawker_nearby = st.sidebar.checkbox('Hawker')\n",
    "        mrt_nearby = st.sidebar.checkbox('MRT Station')\n",
    "        bus_stop_nearby = st.sidebar.checkbox('Bus Stop')\n",
    "\n",
    "        # Calculate amenities score\n",
    "        amenities_score = 0\n",
    "        if mall_nearby:\n",
    "            amenities_score += 1\n",
    "        if hawker_nearby:\n",
    "            amenities_score += 1\n",
    "        if mrt_nearby:\n",
    "            amenities_score += 1\n",
    "        if bus_stop_nearby:\n",
    "            amenities_score += 1\n",
    "\n",
    "        region = st.sidebar.selectbox('Region', ['Central', 'North', 'South', 'East', 'West'])\n",
    "        flat_model = st.sidebar.selectbox('Flat Model', ['Standard', 'Improved', 'New Generation', 'Model A', 'Premium Apartment', 'Terrace', 'Type S1', 'Type S2'])\n",
    "        \n",
    "        # Storey Category (Dummified Variable)\n",
    "        storey_category_input = st.sidebar.selectbox('Storey Category (in ranges)', ['1-5', '6-10', '11-15', '16-20', '21-25', '26-30', '31-35', '36-40', '41-45', '46-50', '>50'])\n",
    "\n",
    "        # Mapping to dummified variables\n",
    "        storey_category_map = {\n",
    "            '1-5': '1_to_5',\n",
    "            '6-10': '6_to_10',\n",
    "            '11-15': '11_to_15',\n",
    "            '16-20': '16_to_20',\n",
    "            '21-25': '21_to_25',\n",
    "            '26-30': '26_to_30',\n",
    "            '31-35': '31_to_35',\n",
    "            '36-40': '36_to_40',\n",
    "            '41-45': '41_to_45',\n",
    "            '46-50': '46_to_50',\n",
    "            '>50': '>50'\n",
    "        }\n",
    "        storey_category = storey_category_map[storey_category_input]\n",
    "\n",
    "        # Primary School Distance and Vacancy Interaction Term (pri_dist_vac)\n",
    "        st.sidebar.subheader(\"Primary School Proximity and Vacancy\")\n",
    "        primary_school_distance = st.sidebar.number_input('Distance to nearest primary school (in km)', step=0.1, format=\"%.1f\", value=1.0)\n",
    "        primary_school_vacancy = st.sidebar.number_input('Vacancy in the nearest primary school', step=1, format=\"%.0f\", value=50)\n",
    "        \n",
    "        # Calculate pri_dist_vac\n",
    "        pri_dist_vac = primary_school_distance * primary_school_vacancy\n",
    "\n",
    "        data = {\n",
    "            'flat_type': flat_type,\n",
    "            'Tranc_YearMonth': Tranc_YearMonth,\n",
    "            'floor_area_sqft': floor_area_sqft,\n",
    "            'hdb_age': hdb_age,\n",
    "            'total_dwelling_units': total_dwelling_units,\n",
    "            'remaining_lease': remaining_lease,\n",
    "            'amenities_1km': amenities_1km,\n",
    "            'region': region,\n",
    "            'flat_model': flat_model,\n",
    "            'storey_category': storey_category,\n",
    "            'pri_dist_vac': pri_dist_vac\n",
    "        }\n",
    "        \n",
    "        return pd.DataFrame(data, index=[0])\n",
    "\n",
    "    # Load the model\n",
    "    model = load_model()\n",
    "    \n",
    "    # Capture user input\n",
    "    input_df = user_input_features()\n",
    "    \n",
    "    # Display input features\n",
    "    st.subheader('User Input Parameters')\n",
    "    st.write(input_df)\n",
    "\n",
    "    # Predict when button is pressed\n",
    "    if st.button('Predict'):\n",
    "        result = predict(\n",
    "            model,\n",
    "            input_df['flat_type'][0],\n",
    "            input_df['tranc_yearmonth'][0],\n",
    "            input_df['floor_area_sqft'][0],\n",
    "            input_df['hdb_age'][0],\n",
    "            input_df['total_dwelling_units'][0],\n",
    "            input_df['remaining_lease'][0],\n",
    "            input_df['amenities_score'][0],\n",
    "            input_df['region'][0],\n",
    "            input_df['flat_model'][0],\n",
    "            input_df['storey_category'][0],\n",
    "            input_df['pri_dist_vac'][0]\n",
    "        )\n",
    "        st.success(f'The predicted resale price of the flat is ${result:.2f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83ecd8b5-bd37-46e0-bc03-3282d09d3fa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
